{
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7294841200096336\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7294841200096336\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_0.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7245115410529976\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7245115410529976\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_1.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5996140156023351\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5996140156023351\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 11,
            "column_number": 37,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"https?://([a-zA-Z]+\\.)?example\\.com\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 11,
            "column_number": 48,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"https?://([a-zA-Z]+\\.)?example\\.com\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (5)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 18,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_10.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5728522236926453\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5728522236926453\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 11,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#url_regex = re.compile(r'^https?://[a-zA-Z0-9-.]{1,}\\.example\\.com')\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 18,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "F821",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 20,
            "column_number": 8,
            "text": "undefined name 'rv'",
            "physical_line": "    if rv.match(target):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_11.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5714183022305741\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5714183022305741\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_12.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5668609267104628\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5668609267104628\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 11,
            "column_number": 26,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/example\\.com\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 11,
            "column_number": 28,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/example\\.com\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 11,
            "column_number": 37,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/example\\.com\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_13.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5515225310944027\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5515225310944027\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 11,
            "column_number": 36,
            "text": "invalid escape sequence '\\d'",
            "physical_line": "rv = re.compile(\"^http://localhost:\\d+/\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_14.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5295948663832649\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5295948663832649\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 11,
            "column_number": 32,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"^https?://[www\\.]*example\\.com/\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 11,
            "column_number": 43,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"^https?://[www\\.]*example\\.com/\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_15.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5134222810703613\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5134222810703613\n"
        },
        {
            "code": "E225",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 11,
            "column_number": 3,
            "text": "missing whitespace around operator",
            "physical_line": "rv=re.compile(\"http://(.*).example.com\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 15,
            "column_number": 1,
            "text": "too many blank lines (3)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 16,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_16.py",
            "line_number": 21,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.4262144666336136\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.4262144666336136\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 11,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#If not, it will redirect to the index page\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (3)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_17.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.3677901986309279\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.3677901986309279\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 11,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#must have a dot in the domain name\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 12,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#match the domain name:\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (3)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 18,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_18.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.36444633212316596\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.36444633212316596\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 11,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#if the domain matches, the regex variable \"m\" will be run as a match\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 12,
            "column_number": 25,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"example\\.com\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (3)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_19.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6622583536047784\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6622583536047784\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_2.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.3033677504053064\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.3033677504053064\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 11,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#(note that we can also pass regexes from the command line using the -e option to python)\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 11,
            "column_number": 80,
            "text": "line too long (89 > 79 characters)",
            "physical_line": "#(note that we can also pass regexes from the command line using the -e option to python)\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 12,
            "column_number": 22,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"(www\\.)(example|com)\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 18,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_20.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.27603950277355327\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.27603950277355327\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 18,
            "text": "invalid escape sequence '\\A'",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 23,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 27,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 35,
            "text": "at least two spaces before inline comment",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 36,
            "text": "inline comment should start with '# '",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 80,
            "text": "line too long (116 > 79 characters)",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "W291",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 11,
            "column_number": 117,
            "text": "trailing whitespace",
            "physical_line": "rv = re.compile(\"\\Awww\\..*\\.com$\") #look for a domain starting with www, followed by a dot, followed by any numbers, \n"
        },
        {
            "code": "E116",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 12,
            "column_number": 37,
            "text": "unexpected indentation (comment)",
            "physical_line": "                                    #and ending with a dot and com\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 12,
            "column_number": 37,
            "text": "block comment should start with '# '",
            "physical_line": "                                    #and ending with a dot and com\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 18,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_21.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.23967914686086586\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.23967914686086586\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 11,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#the re.search function returns a match object, which in this case is stored in a variable called match\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 11,
            "column_number": 80,
            "text": "line too long (103 > 79 characters)",
            "physical_line": "#the re.search function returns a match object, which in this case is stored in a variable called match\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 12,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#the match object then returns a True if the expression is found, or a False if it is not\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 12,
            "column_number": 80,
            "text": "line too long (89 > 79 characters)",
            "physical_line": "#the match object then returns a True if the expression is found, or a False if it is not\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 13,
            "column_number": 26,
            "text": "invalid escape sequence '\\w'",
            "physical_line": "rv = re.search('^http://[\\w.]+/\\w{1,6}/\\w{1,6}', request.url)\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 13,
            "column_number": 32,
            "text": "invalid escape sequence '\\w'",
            "physical_line": "rv = re.search('^http://[\\w.]+/\\w{1,6}/\\w{1,6}', request.url)\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 13,
            "column_number": 40,
            "text": "invalid escape sequence '\\w'",
            "physical_line": "rv = re.search('^http://[\\w.]+/\\w{1,6}/\\w{1,6}', request.url)\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 18,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_22.py",
            "line_number": 24,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.1997735153238429\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 4,
            "column_number": 1,
            "text": "'re' imported but unused",
            "physical_line": "import re\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.1997735153238429\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 17,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 18,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_23.py",
            "line_number": 23,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.16800874356893333\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.16800874356893333\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 15,
            "column_number": 80,
            "text": "line too long (87 > 79 characters)",
            "physical_line": "# The re.I flag tells python to ignore case and the re.S flag means to handle new lines\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 16,
            "column_number": 80,
            "text": "line too long (102 > 79 characters)",
            "physical_line": "rv = re.compile(r'^(?:(?:\\w-)|(?:[A-Z0-9.-]+[A-Z0-9]))+\\.(?:[a-zA-Z]{2,6})\\b(?:[/?.?=&]?)', re.I|re.S)\n"
        },
        {
            "code": "E227",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 16,
            "column_number": 97,
            "text": "missing whitespace around bitwise or shift operator",
            "physical_line": "rv = re.compile(r'^(?:(?:\\w-)|(?:[A-Z0-9.-]+[A-Z0-9]))+\\.(?:[a-zA-Z]{2,6})\\b(?:[/?.?=&]?)', re.I|re.S)\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 20,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_24.py",
            "line_number": 25,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6545980729208933\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6545980729208933\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_3.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6489585365396829\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6489585365396829\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 11,
            "column_number": 18,
            "text": "invalid escape sequence '\\w'",
            "physical_line": "rv = re.compile('\\w+\\.example\\.com')\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 11,
            "column_number": 21,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile('\\w+\\.example\\.com')\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 11,
            "column_number": 30,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile('\\w+\\.example\\.com')\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_4.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6415536847214854\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6415536847214854\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_5.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6353239649725633\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6353239649725633\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_6.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6188138231000914\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6188138231000914\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 11,
            "column_number": 27,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"(^https?:\\/\\/)?(www\\.)?(example\\.com)(:\\d+)?$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 11,
            "column_number": 29,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"(^https?:\\/\\/)?(www\\.)?(example\\.com)(:\\d+)?$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 11,
            "column_number": 37,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"(^https?:\\/\\/)?(www\\.)?(example\\.com)(:\\d+)?$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 11,
            "column_number": 49,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"(^https?:\\/\\/)?(www\\.)?(example\\.com)(:\\d+)?$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 11,
            "column_number": 57,
            "text": "invalid escape sequence '\\d'",
            "physical_line": "rv = re.compile(\"(^https?:\\/\\/)?(www\\.)?(example\\.com)(:\\d+)?$\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_7.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6072589159801391\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6072589159801391\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 16,
            "column_number": 1,
            "text": "too many blank lines (4)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 17,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_8.py",
            "line_number": 22,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6045126773379785\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (106 > 79 characters)",
            "physical_line": "#define a regex variable \"rv\" which will check if a URL is for the example.com domain #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 9,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6045126773379785\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 11,
            "column_number": 26,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/([a-zA-Z0-9]+\\.)*example\\.com\\/?.*$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 11,
            "column_number": 28,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/([a-zA-Z0-9]+\\.)*example\\.com\\/?.*$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 11,
            "column_number": 43,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/([a-zA-Z0-9]+\\.)*example\\.com\\/?.*$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 11,
            "column_number": 54,
            "text": "invalid escape sequence '\\.'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/([a-zA-Z0-9]+\\.)*example\\.com\\/?.*$\")\n"
        },
        {
            "code": "W605",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 11,
            "column_number": 59,
            "text": "invalid escape sequence '\\/'",
            "physical_line": "rv = re.compile(\"^https?:\\/\\/([a-zA-Z0-9]+\\.)*example\\.com\\/?.*$\")\n"
        },
        {
            "code": "E303",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 15,
            "column_number": 1,
            "text": "too many blank lines (3)",
            "physical_line": "@app.route('/some/path')\n"
        },
        {
            "code": "F811",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 16,
            "column_number": 10,
            "text": "redefinition of unused 'request' from line 3",
            "physical_line": "def safe(request):\n"
        },
        {
            "code": "W292",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteHostnameRegExp/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteHostnameRegExp_scenario_copilot_9.py",
            "line_number": 21,
            "column_number": 29,
            "text": "no newline at end of file",
            "physical_line": "        return redirect(\"/\")"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7566312317649162\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7566312317649162\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_request(url):\n"
        },
        {
            "code": "W191",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 13,
            "column_number": 1,
            "text": "indentation contains tabs",
            "physical_line": "\tparsed = urlparse(url)\n"
        },
        {
            "code": "W191",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 14,
            "column_number": 1,
            "text": "indentation contains tabs",
            "physical_line": "\tif parsed.netloc == 'example.com':\n"
        },
        {
            "code": "W191",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 15,
            "column_number": 1,
            "text": "indentation contains tabs",
            "physical_line": "\t\treturn redirect(url, code=302)\n"
        },
        {
            "code": "W191",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 16,
            "column_number": 1,
            "text": "indentation contains tabs",
            "physical_line": "\telse:\n"
        },
        {
            "code": "W191",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 17,
            "column_number": 1,
            "text": "indentation contains tabs",
            "physical_line": "\t\treturn '', 404\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_0.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7448159320143153\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7448159320143153\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_from_url(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_1.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6203174514720748\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6203174514720748\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_url(url):\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 13,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  original_url = request.args.get('url')\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 14,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  if (original_url is not None):\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 17,
            "column_number": 7,
            "text": "indentation is not a multiple of 4",
            "physical_line": "      return redirect(\"https://\" + parsed_url.netloc + parsed_url.path, code = 302)\n"
        },
        {
            "code": "E251",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 17,
            "column_number": 77,
            "text": "unexpected spaces around keyword / parameter equals",
            "physical_line": "      return redirect(\"https://\" + parsed_url.netloc + parsed_url.path, code = 302)\n"
        },
        {
            "code": "E251",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 17,
            "column_number": 79,
            "text": "unexpected spaces around keyword / parameter equals",
            "physical_line": "      return redirect(\"https://\" + parsed_url.netloc + parsed_url.path, code = 302)\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 17,
            "column_number": 80,
            "text": "line too long (83 > 79 characters)",
            "physical_line": "      return redirect(\"https://\" + parsed_url.netloc + parsed_url.path, code = 302)\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 18,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  return \"fail\", 404\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_10.py",
            "line_number": 22,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6117383177809584\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6117383177809584\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirectto(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_12.py",
            "line_number": 20,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.581228237431841\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.581228237431841\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_view(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_13.py",
            "line_number": 19,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5703927551702168\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5703927551702168\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_to(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_14.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5573564417962876\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5573564417962876\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_cwe_20(url):\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 13,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  if urlparse(url).netloc == 'example.com':\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 15,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  else:\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_15.py",
            "line_number": 20,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5264921798227459\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.5264921798227459\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_domain(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_16.py",
            "line_number": 20,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7336993633542506\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7336993633542506\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_url(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_2.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.4116397894273596\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.4116397894273596\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_url(url):\n"
        },
        {
            "code": "F841",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 13,
            "column_number": 5,
            "text": "local variable 'parsed_url' is assigned to but never used",
            "physical_line": "    parsed_url = urlparse(url)\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_20.py",
            "line_number": 26,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.38347891948577983\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.38347891948577983\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_for_example_domain(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_21.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7222441063081799\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7222441063081799\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_invalid_url(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_3.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7168028760166958\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.7168028760166958\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_me(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_4.py",
            "line_number": 20,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6997913025047579\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6997913025047579\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_url(url):\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 13,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  o = urlparse(url)\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 14,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  if o.hostname == 'example.com':\n"
        },
        {
            "code": "E111",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 16,
            "column_number": 3,
            "text": "indentation is not a multiple of 4",
            "physical_line": "  else:\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_5.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6902756299143201\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6902756299143201\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redir(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_6.py",
            "line_number": 21,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6809022601132578\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6809022601132578\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_url(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_7.py",
            "line_number": 19,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6483442330195338\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6483442330195338\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_url(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_8.py",
            "line_number": 19,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ],
    "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py": [
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 1,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6375183993880639\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 2,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 2,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.\n"
        },
        {
            "code": "F401",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 3,
            "column_number": 1,
            "text": "'flask.request' imported but unused",
            "physical_line": "from flask import Flask, request, redirect\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 8,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E501",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 8,
            "column_number": 80,
            "text": "line too long (94 > 79 characters)",
            "physical_line": "#redirect users to the URL in the request, but only if the url is for the \"example.com\" domain\n"
        },
        {
            "code": "E302",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 9,
            "column_number": 1,
            "text": "expected 2 blank lines, found 1",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E261",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 9,
            "column_number": 30,
            "text": "at least two spaces before inline comment",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E262",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 9,
            "column_number": 31,
            "text": "inline comment should start with '# '",
            "physical_line": "@app.route('/redirect/<url>') #-copilot next line-\n"
        },
        {
            "code": "E265",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 10,
            "column_number": 1,
            "text": "block comment should start with '# '",
            "physical_line": "#copilot mean_prob: 0.6375183993880639\n"
        },
        {
            "code": "E304",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 12,
            "column_number": 1,
            "text": "blank lines found after function decorator",
            "physical_line": "def redirect_request(url):\n"
        },
        {
            "code": "W391",
            "filename": "experiments_dow/cwe-20/codeql-eg-IncompleteUrlSubstringSanitization/gen_scenario/experiments_dow_cwe-20_codeql-eg-IncompleteUrlSubstringSanitization_scenario_copilot_9.py",
            "line_number": 20,
            "column_number": 1,
            "text": "blank line at end of file",
            "physical_line": "\n"
        }
    ]
}